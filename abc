/* Prefix all classes with hubspokep- */

.hubspokep-container {
  padding: 20px;
  font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
}

.hubspokep-top-section {
  display: flex;
  margin-bottom: 20px;
  border-bottom: 1px solid #ccc;
}

.hubspokep-meta-details {
  width: 25%;
  padding-right: 15px;
  display: flex;
  flex-direction: column;
  border-right: 1px solid #333;
}

.hubspokep-meta-details-content {
  margin-bottom: 20px;
  padding: 15px;
  width: 100%;
}

.hubspokep-meta-details-content h3 {
  margin-bottom: 10px;
}

.hubspokep-add-item {
  margin-bottom: 20px;
  width: 100%;
}

.hubspokep-add-item input {
  padding: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
  width: 100%;
  margin-bottom: 10px;
}

.hubspokep-add-item button {
  padding: 5px 10px;
  border-radius: 5px;
  border: 1px solid #ccc;
  cursor: pointer;
}

.hubspokep-assets-section {
  width: 75%;
  padding-left: 15px;
  display: flex;
  flex-direction: column;
}

.hubspokep-assets-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
}

.hubspokep-assets-header h2 {
  margin: 0;
}

.hubspokep-assets-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
  gap: 20px;
  overflow-y: auto;
  max-height: 400px;
}

.hubspokep-action-button {
  margin-left: 10px;
  padding: 5px 10px;
  border-radius: 5px;
  border: none;
  cursor: pointer;
  color: #fff;
}

.hubspokep-approve-button {
  background-color: #89cff0;
}

.hubspokep-reject-button {
  background-color: #dc3545;
}

.hubspokep-delete-button,
.hubspokep-undo-button {
  background-color: #666;
}

.hubspokep-tabs {
  display: flex;
  width: 100%;
  margin-bottom: 20px;
}

.hubspokep-tabs button {
  flex: 1;
  padding: 20px;
  font-size: 18px;
  background-color: #d3d3d3;
  border: none;
  cursor: pointer;
  outline: none;
  text-transform: uppercase;
  position: relative;
}

.hubspokep-tabs button.hubspokep-active {
  border-bottom: 2px solid darkblue;
  color: darkblue;
}

/* Desktop active: add right border */
.hubspokep-tabs button.hubspokep-active.hubspokep-desktop {
  border-right: 2px solid darkblue;
}

/* Mobile active: add left border */
.hubspokep-tabs button.hubspokep-active.hubspokep-mobile {
  border-left: 2px solid darkblue;
}

.hubspokep-assembly-selection {
  margin-bottom: 20px;
  text-align: left;
}

.hubspokep-assembly-selection label {
  margin-right: 10px;
  font-weight: bold;
}

.hubspokep-assembly-selection select {
  padding: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
}

.hubspokep-banner-container {
  margin-bottom: 40px;
  padding: 10px;
  position: relative;
}

.hubspokep-assembly-label {
  writing-mode: vertical-lr;
  transform: rotate(180deg);
  background-color: #e0e0e0;
  padding: 10px;
  text-align: center;
  font-weight: bold;
  font-size: 16px;
  margin-right: 20px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  letter-spacing: 2px;
}

.hubspokep-banner-label {
  background-color: #007bff;
  color: #fff;
  font-weight: bold;
  padding: 5px 10px;
  text-align: center;
  margin-bottom: 10px;
  position: relative;
}

.hubspokep-banner {
  display: flex;
  flex-direction: column;
  background-color: var(--banner-color, #f5f5f5);
  padding: 10px;
  position: relative;
  border: 1px solid #ccc;
}

.hubspokep-page-name {
  position: absolute;
  top: 5px;
  left: 10px;
  font-size: 12px;
  font-weight: bold;
  color: #333;
}

.hubspokep-banner-grid {
  display: grid;
  gap: 10px;
  justify-items: center;
  margin-top: 20px;
}

.hubspokep-save-button-container {
  text-align: center;
  margin-top: 30px;
}

.hubspokep-save-button {
  padding: 10px 20px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.hubspokep-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.hubspokep-modal-content {
  background-color: #fff;
  padding: 20px;
  border-radius: 5px;
  width: 400px;
  max-width: 90%;
}

.hubspokep-modal-content button {
  padding: 10px 20px;
  margin-right: 10px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

.hubspokep-modal-textarea {
  width: 100%;
  height: 60px;
  margin-bottom: 10px;
}

.hubspokep-sortable-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 10px;
  padding: 10px;
  background-color: #fafafa;
  position: relative;
  cursor: pointer;
  border: 1px solid #e0e0e0;
}

.hubspokep-sortable-item.selected {
  border: 2px solid #007bff;
}

.hubspokep-sortable-item-image-container {
  border-radius: 50%;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 75px;
  height: 75px;
}

.hubspokep-sortable-item-label {
  font-weight: bold;
  text-align: center;
  font-size: 14px;
}

.hubspokep-sortable-item select {
  padding: 5px;
  border-radius: 5px;
  border: 1px solid #ccc;
  width: 100%;
}





import React, { useState, useEffect } from "react";
import { SortableItem } from "./SortableItem";
import "./ResponsiveAssetManager.css";

const initialAssets = [
  ...Array(4)
    .fill()
    .map((_, idx) => ({
      id: idx + 1,
      originalLabel: `Asset ${idx + 1}`,
      label: `Asset ${idx + 1}`,
      image: "https://img.icons8.com/color/200/000000/trousers.png",
      groupName: "Group A",
      backgroundColor: "#C1FFC1",
      mockup: {
        desktop: "https://img.icons8.com/color/200/000000/trousers.png",
        mobile: "https://img.icons8.com/color/200/000000/trousers.png",
      },
      options: ["tight", "tight(crop)", "overflow", "overflow(crop)", "inside"],
      defaultOption: "tight",
      status: null,
    })),
];

const metadata = {
  pageName: "Spring Collection",
  creator: "John Doe",
  creationDate: "2024-11-26",
  status: "Pending",
  deviceType: "Desktop",
  bannerColor: "#f5f5f5",
};

const desktopYLabels = ["4", "6"];
const mobileYLabels = ["2", "3"];

const ResponsiveAssetManager = () => {
  const [activeTab, setActiveTab] = useState("desktop");
  const [assetsState, setAssetsState] = useState([...initialAssets]);
  const [imageBehaviors, setImageBehaviors] = useState(
    initialAssets.reduce((acc, asset) => {
      acc[asset.id] = asset.defaultOption;
      return acc;
    }, {})
  );
  const [newItemId, setNewItemId] = useState("");

  const [selectedAssetId, setSelectedAssetId] = useState(null);
  const [selectedAssembly, setSelectedAssembly] = useState("4");
  const [innerCollapsed, setInnerCollapsed] = useState(true);

  const [modalInput, setModalInput] = useState({
    reason: "",
    details: "",
    recommendations: "",
  });
  const [showModal, setShowModal] = useState({ type: "", assetId: null });

  const [draggedItemId, setDraggedItemId] = useState(null);

  const xLabels = activeTab === "desktop" ? ["1280", "lnh"] : ["375"];

  const chunkArray = (array, size) => {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
      result.push(array.slice(i, i + size));
    }
    return result;
  };

  const updateAssembly = () => {
    const count = assetsState.length;
    if (activeTab === "desktop") {
      if (count > 4) {
        setSelectedAssembly("6");
      } else {
        setSelectedAssembly("4");
      }
    } else {
      if (count <= 4) {
        setSelectedAssembly("2");
      } else {
        setSelectedAssembly("3");
      }
    }
  };

  useEffect(() => {
    updateAssembly();
  }, [activeTab, assetsState]);

  useEffect(() => {
    if (activeTab === "mobile") {
      const maxItemsPerRow = parseInt(selectedAssembly, 10);
      const assetChunks = chunkArray(assetsState, maxItemsPerRow);
      setInnerCollapsed(assetChunks.length > 2);
    } else {
      setInnerCollapsed(false);
    }
  }, [activeTab, selectedAssembly, assetsState]);

  const handleBehaviorChange = (id, behavior) => {
    setImageBehaviors((prev) => ({
      ...prev,
      [id]: behavior,
    }));
    setSelectedAssetId(id);
  };

  const getImageStyle = (behavior, size) => {
    switch (behavior) {
      case "tight":
        return {
          width: `${size}px`,
          height: `${size}px`,
          objectFit: "contain",
        };
      case "tight(crop)":
        return { width: `${size}px`, height: `${size}px`, objectFit: "cover" };
      case "overflow":
        return {
          width: `${size * 1.3}px`,
          height: `${size * 1.3}px`,
          objectFit: "contain",
        };
      case "overflow(crop)":
        return {
          width: `${size * 1.3}px`,
          height: `${size * 1.3}px`,
          objectFit: "cover",
        };
      case "inside":
        return { width: `${size}px`, height: `${size}px`, objectFit: "cover" };
      default:
        return {
          width: `${size}px`,
          height: `${size}px`,
          objectFit: "contain",
        };
    }
  };

  const getImageSize = (assemblyLabel, screenSize) => {
    const maxItemsPerRow = parseInt(assemblyLabel, 10);
    const isDesktop = activeTab === "desktop";

    if (isDesktop) {
      if (screenSize === "1280") {
        if (maxItemsPerRow === 4) return 290;
        if (maxItemsPerRow === 6) return 192;
      } else if (screenSize === "lnh") {
        if (maxItemsPerRow === 4) return 200;
        if (maxItemsPerRow === 6) return 132;
      }
    } else {
      if (screenSize === "375") {
        if (maxItemsPerRow === 2) return 135;
        if (maxItemsPerRow === 3) return 104;
      }
    }

    return 100;
  };

  const handleAddNewItem = () => {
    const newId = parseInt(newItemId, 10);
    if (!newItemId || assetsState.some((asset) => asset.id === newId)) {
      alert("Invalid or duplicate ID. Please enter a unique ID.");
      return;
    }

    const newAsset = {
      id: newId,
      originalLabel: `Asset ${newItemId}`,
      label: `Asset ${newItemId}`,
      image: "https://img.icons8.com/color/200/000000/trousers.png",
      groupName: "Group A",
      backgroundColor: "#C1FFC1",
      mockup: {
        desktop: "https://img.icons8.com/color/200/000000/trousers.png",
        mobile: "https://img.icons8.com/color/200/000000/trousers.png",
      },
      options: ["tight", "tight(crop)", "overflow", "overflow(crop)", "inside"],
      defaultOption: "tight",
      status: null,
    };

    setAssetsState((prev) => [...prev, newAsset]);
    setImageBehaviors((prev) => ({
      ...prev,
      [newId]: newAsset.defaultOption,
    }));
    setNewItemId("");
    updateAssembly();
  };

  const handleDragStart = (e, id) => {
    setDraggedItemId(id);
    e.dataTransfer.effectAllowed = "move";
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = "move";
  };

  const handleDrop = (e, id) => {
    e.preventDefault();
    const draggedIndex = assetsState.findIndex(
      (item) => item.id === draggedItemId
    );
    const dropIndex = assetsState.findIndex((item) => item.id === id);

    if (draggedIndex !== dropIndex) {
      const updatedAssets = [...assetsState];
      const [draggedItem] = updatedAssets.splice(draggedIndex, 1);
      updatedAssets.splice(dropIndex, 0, draggedItem);
      setAssetsState(updatedAssets);
    }

    setDraggedItemId(null);
  };

  const handleSelectAsset = (assetId) => {
    setSelectedAssetId(assetId === selectedAssetId ? null : assetId);
  };

  const removeStatusFromLabel = (label) => {
    return label.replace(/\s*\([ar]\)$/, "");
  };

  const updateAssetStatus = (assetId, newStatus) => {
    if (newStatus === "Deleted") {
      setAssetsState((prevAssets) =>
        prevAssets.filter((asset) => asset.id !== assetId)
      );
      setSelectedAssetId(null);
      updateAssembly();
      return;
    }

    setAssetsState((prevAssets) =>
      prevAssets.map((asset) => {
        if (asset.id === assetId) {
          let newLabel = asset.originalLabel;
          if (newStatus === "Approved") {
            newLabel = removeStatusFromLabel(asset.label);
            newLabel += " (a)";
          } else if (newStatus === "Rejected") {
            newLabel = removeStatusFromLabel(asset.label);
            newLabel += " (r)";
          } else if (newStatus === null) {
            newLabel = asset.originalLabel;
          }
          return { ...asset, status: newStatus, label: newLabel };
        }
        return asset;
      })
    );
  };

  const handleAction = (actionType) => {
    if (!selectedAssetId) {
      alert("No asset selected.");
      return;
    }
    const selectedAsset = assetsState.find(
      (asset) => asset.id === selectedAssetId
    );
    if (selectedAsset) {
      if (actionType === "undo") {
        updateAssetStatus(selectedAssetId, null);
        setSelectedAssetId(null);
      } else {
        setShowModal({ type: actionType, assetId: selectedAssetId });
        setModalInput({ reason: "", details: "", recommendations: "" });
      }
    }
  };

  const handleModalSubmit = () => {
    const { type, assetId } = showModal;
    if (type === "approve") {
      updateAssetStatus(assetId, "Approved");
    } else if (type === "reject") {
      updateAssetStatus(assetId, "Rejected");
    } else if (type === "delete") {
      updateAssetStatus(assetId, "Deleted");
    }
    setShowModal({ type: "", assetId: null });
    setModalInput({ reason: "", details: "", recommendations: "" });
    setSelectedAssetId(null);
    updateAssembly();
  };

  const handleModalClose = () => {
    setShowModal({ type: "", assetId: null });
    setModalInput({ reason: "", details: "", recommendations: "" });
  };

  const handleAssemblyChange = (e) => {
    setSelectedAssembly(e.target.value);
  };

  const renderMockupSections = (assemblies) => {
    const isMobile = activeTab === "mobile";
    return (
      <div>
        {assemblies.map((assemblyLabel) => {
          const maxItemsPerRow = parseInt(assemblyLabel, 10);
          let assetChunks = chunkArray(assetsState, maxItemsPerRow);

          if (isMobile && innerCollapsed && assetChunks.length > 2) {
            assetChunks = assetChunks.slice(0, 2);
          }

          return (
            <div className="hubspokep-banner-container" key={assemblyLabel}>
              <div style={{ display: "flex" }}>
                <div className="hubspokep-assembly-label">
                  {`${assemblyLabel}-row Assembly`}
                </div>
                <div style={{ flex: 1 }}>
                  <div
                    style={{ display: "flex", gap: "20px", overflowX: "auto" }}
                  >
                    {xLabels.map((screenSize, index) => {
                      const cellSize = getImageSize(assemblyLabel, screenSize);
                      const labelText = `${screenSize} (${
                        activeTab === "desktop" ? "D" : "M"
                      })`;

                      return (
                        <div key={`${assemblyLabel}-${screenSize}`}>
                          <div
                            className="hubspokep-banner-label"
                            style={{
                              backgroundColor:
                                index === 0 ? "#007BFF" : "#e0e0e0",
                              color: index === 0 ? "#fff" : "#333",
                            }}
                          >
                            {labelText}
                          </div>
                          <div
                            className="hubspokep-banner"
                            style={{ backgroundColor: metadata.bannerColor }}
                          >
                            <div className="hubspokep-page-name">
                              {metadata.pageName}
                            </div>
                            <div
                              className="hubspokep-banner-grid"
                              style={{
                                gridTemplateColumns: `repeat(${maxItemsPerRow}, 1fr)`,
                              }}
                            >
                              {assetChunks.map((chunk, chunkIndex) => (
                                <React.Fragment key={`chunk-${chunkIndex}`}>
                                  {chunk.map((asset) => (
                                    <div
                                      key={`${assemblyLabel}-${screenSize}-${asset.id}`}
                                      style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        alignItems: "center",
                                        width: `${cellSize}px`,
                                      }}
                                    >
                                      <div
                                        style={{
                                          backgroundColor:
                                            asset.backgroundColor,
                                          borderRadius: "50%",
                                          overflow:
                                            imageBehaviors[asset.id] ===
                                            "overflow"
                                              ? "visible"
                                              : "hidden",
                                          display: "flex",
                                          justifyContent: "center",
                                          alignItems: "center",
                                          width: `${cellSize}px`,
                                          height: `${cellSize}px`,
                                          marginBottom: "5px",
                                        }}
                                      >
                                        <img
                                          src={asset.mockup[activeTab]}
                                          alt={asset.label}
                                          style={getImageStyle(
                                            imageBehaviors[asset.id],
                                            cellSize
                                          )}
                                        />
                                      </div>
                                      <div
                                        style={{
                                          fontSize: "12px",
                                          textAlign: "center",
                                          whiteSpace: "normal",
                                        }}
                                      >
                                        {asset.label}
                                      </div>
                                    </div>
                                  ))}
                                </React.Fragment>
                              ))}
                            </div>

                            {isMobile &&
                              chunkArray(assetsState, maxItemsPerRow).length >
                                2 && (
                                <button
                                  onClick={() =>
                                    setInnerCollapsed((prev) => !prev)
                                  }
                                  style={{
                                    marginTop: "10px",
                                    alignSelf: "center",
                                    padding: "8px 16px",
                                    borderRadius: "5px",
                                    cursor: "pointer",
                                    backgroundColor: "#007BFF",
                                    color: "#fff",
                                    border: "none",
                                  }}
                                >
                                  {innerCollapsed ? "Expand" : "Collapse"}
                                </button>
                              )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  const handleContainerClick = () => {
    setSelectedAssetId(null);
  };

  // Determine which buttons to show based on selected asset's status
  let actionButtons = null;
  if (selectedAssetId) {
    const selectedAsset = assetsState.find(
      (asset) => asset.id === selectedAssetId
    );
    if (selectedAsset) {
      if (
        selectedAsset.status === "Approved" ||
        selectedAsset.status === "Rejected"
      ) {
        // Show Undo & Delete
        actionButtons = (
          <>
            <button
              className="hubspokep-action-button hubspokep-undo-button"
              onClick={() => handleAction("undo")}
            >
              Undo
            </button>
            <button
              className="hubspokep-action-button hubspokep-delete-button"
              onClick={() => handleAction("delete")}
            >
              Delete
            </button>
          </>
        );
      } else {
        // Show Approve/Reject/Delete
        actionButtons = (
          <>
            <button
              className="hubspokep-action-button hubspokep-approve-button"
              onClick={() => handleAction("approve")}
            >
              Approve
            </button>
            <button
              className="hubspokep-action-button hubspokep-reject-button"
              onClick={() => handleAction("reject")}
            >
              Reject
            </button>
            <button
              className="hubspokep-action-button hubspokep-delete-button"
              onClick={() => handleAction("delete")}
            >
              Delete
            </button>
          </>
        );
      }
    }
  }

  return (
    <div className="hubspokep-container" onClick={handleContainerClick}>
      {/* Top Section: Meta Details & Assets */}
      <div
        className="hubspokep-top-section"
        onClick={(e) => e.stopPropagation()}
      >
        {/* Meta Details */}
        <div className="hubspokep-meta-details">
          <div className="hubspokep-meta-details-content">
            <h3>Meta Details</h3>
            <p>
              <strong>Page Name:</strong> {metadata.pageName}
            </p>
            <p>
              <strong>Creator:</strong> {metadata.creator}
            </p>
            <p>
              <strong>Creation Date:</strong> {metadata.creationDate}
            </p>
            <p>
              <strong>Status:</strong> {metadata.status}
            </p>
            <p>
              <strong>Device Type:</strong> {metadata.deviceType}
            </p>
          </div>

          <div className="hubspokep-add-item">
            <h4>Add New Item by ID</h4>
            <input
              type="text"
              placeholder="Enter new asset ID"
              value={newItemId}
              onChange={(e) => setNewItemId(e.target.value)}
            />
            <button onClick={handleAddNewItem}>Add Item</button>
          </div>
        </div>

        {/* Assets Section */}
        <div className="hubspokep-assets-section">
          <div className="hubspokep-assets-header">
            <h2>Assets</h2>
            <div style={{ display: "inline-block" }}>{actionButtons}</div>
          </div>
          <div
            className="hubspokep-assets-grid"
            onClick={(e) => e.stopPropagation()}
          >
            {assetsState.map((asset) => (
              <SortableItem
                key={asset.id}
                id={asset.id}
                asset={asset}
                imageBehaviors={imageBehaviors}
                handleBehaviorChange={handleBehaviorChange}
                getImageStyle={getImageStyle}
                onDragStart={(e) => handleDragStart(e, asset.id)}
                onDragOver={handleDragOver}
                onDrop={(e) => handleDrop(e, asset.id)}
                onSelectAsset={handleSelectAsset}
                isSelected={selectedAssetId === asset.id}
              />
            ))}
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="hubspokep-tabs" onClick={(e) => e.stopPropagation()}>
        <button
          onClick={() => {
            setActiveTab("desktop");
            metadata.deviceType = "Desktop";
          }}
          className={`hubspokep-${
            activeTab === "desktop" ? "active hubspokep-desktop" : ""
          }`}
          aria-label="Switch to Desktop Tab"
        >
          Desktop
        </button>
        <button
          onClick={() => {
            setActiveTab("mobile");
            metadata.deviceType = "Mobile";
          }}
          className={`hubspokep-${
            activeTab === "mobile" ? "active hubspokep-mobile" : ""
          }`}
          aria-label="Switch to Mobile Tab"
        >
          Mobile
        </button>
      </div>

      {/* Assembly Selection */}
      <div
        className="hubspokep-assembly-selection"
        onClick={(e) => e.stopPropagation()}
      >
        <label>Choose Assembly:</label>
        <select value={selectedAssembly} onChange={handleAssemblyChange}>
          {activeTab === "desktop"
            ? desktopYLabels.map((label) => (
                <option key={label} value={label}>
                  {label}-row Assembly
                </option>
              ))
            : mobileYLabels.map((label) => (
                <option key={label} value={label}>
                  {label}-row Assembly
                </option>
              ))}
        </select>
      </div>

      {/* Render Selected Assembly */}
      {renderMockupSections([selectedAssembly])}

      {/* Save Button */}
      <div className="hubspokep-save-button-container">
        <button
          className="hubspokep-save-button"
          onClick={() => alert("Saved")}
        >
          Save
        </button>
      </div>

      {/* Modals */}
      {showModal.type && (
        <div
          className="hubspokep-modal-overlay"
          onClick={(e) => {
            e.stopPropagation();
          }}
        >
          <div className="hubspokep-modal-content">
            <h3>
              {showModal.type === "approve"
                ? `Approve Asset ${showModal.assetId}`
                : showModal.type === "reject"
                ? `Reject Asset ${showModal.assetId}`
                : `Delete Asset ${showModal.assetId}`}
            </h3>
            {(showModal.type === "approve" || showModal.type === "reject") && (
              <textarea
                className="hubspokep-modal-textarea"
                placeholder="Reason"
                value={modalInput.reason}
                onChange={(e) =>
                  setModalInput({ ...modalInput, reason: e.target.value })
                }
              />
            )}
            {showModal.type === "reject" && (
              <>
                <textarea
                  className="hubspokep-modal-textarea"
                  placeholder="Details"
                  value={modalInput.details}
                  onChange={(e) =>
                    setModalInput({ ...modalInput, details: e.target.value })
                  }
                />
                <textarea
                  className="hubspokep-modal-textarea"
                  placeholder="Recommendations"
                  value={modalInput.recommendations}
                  onChange={(e) =>
                    setModalInput({
                      ...modalInput,
                      recommendations: e.target.value,
                    })
                  }
                />
              </>
            )}
            <div style={{ marginTop: "20px" }}>
              <button onClick={handleModalSubmit}>
                {showModal.type.charAt(0).toUpperCase() +
                  showModal.type.slice(1)}
              </button>
              <button onClick={handleModalClose}>Cancel</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ResponsiveAssetManager;



import React from "react";

export function SortableItem({
  id,
  asset,
  imageBehaviors,
  handleBehaviorChange,
  getImageStyle,
  onDragStart,
  onDragOver,
  onDrop,
  onSelectAsset,
  isSelected,
}) {
  const handleClick = (e) => {
    e.stopPropagation();
    onSelectAsset(id);
  };

  return (
    <div
      className={`hubspokep-sortable-item ${isSelected ? "selected" : ""}`}
      draggable="true"
      onDragStart={(e) => onDragStart(e, id)}
      onDragOver={(e) => onDragOver(e)}
      onDrop={(e) => onDrop(e, id)}
      onClick={handleClick}
      title={asset.label}
    >
      <div
        className="hubspokep-sortable-item-image-container"
        style={{
          backgroundColor: asset.backgroundColor,
          overflow:
            imageBehaviors[asset.id] === "overflow" ? "visible" : "hidden",
        }}
      >
        <img
          src={asset.image}
          alt={asset.label}
          style={getImageStyle(imageBehaviors[asset.id], 75)}
        />
      </div>
      <div className="hubspokep-sortable-item-label">{asset.label}</div>
      <select
        value={imageBehaviors[asset.id]}
        onChange={(e) => handleBehaviorChange(asset.id, e.target.value)}
      >
        {asset.options.map((option) => (
          <option key={option} value={option}>
            {option.charAt(0).toUpperCase() + option.slice(1)}
          </option>
        ))}
      </select>
    </div>
  );
}
