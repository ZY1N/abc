import React, { useState, useEffect } from "react";
import { SortableItem } from "./SortableItem"; // Ensure correct path
// import Approve, Reject, Delete from wherever they come from

const defaultOptions = ["tight", "tight(crop)", "overflow", "overflow(crop)", "inside"];

function mapModelLabelToDefaultOption(modelLabel) {
  // A simple heuristic: if "inside" is in the label, choose "inside", else "tight"
  // You can enhance this logic as needed
  if (modelLabel && modelLabel.includes("inside")) {
    return "inside";
  }
  return "tight";
}

const HubspokePreview = ({ data }) => {
  // Extracting the needed info from the provided data object
  // Assuming data structure matches the provided JSON exactly
  const moduleResponse = data.modules[0].moduleResponse;
  const { pageName, status, gridName, usecase } = moduleResponse;
  const groups = moduleResponse.groups || [];

  // We'll process groups and their assets into our desired `assetsState` format
  // Example: Combine desktop and mobile variants of the same assetId into one asset
  const processedAssets = [];
  const assetMap = {};

  groups.forEach((group) => {
    (group.assets || []).forEach((asset) => {
      const key = asset.assetId;
      if (!assetMap[key]) {
        // Initialize a combined record
        assetMap[key] = {
          id: asset.assetId, // Use assetId as the identifier
          originalLabel: asset.assetName || `Asset ${asset.assetId}`,
          label: asset.assetName || `Asset ${asset.assetId}`,
          groupName: group.categoryName || "Group A",
          backgroundColor: "#C1FFC1",
          mockup: {
            desktop: "",
            mobile: ""
          },
          options: defaultOptions,
          defaultOption: mapModelLabelToDefaultOption(asset.modelLabel),
          status: asset.status || null
        };
      }
      // Assign mockups based on deviceType
      if (asset.deviceType === "desktop") {
        assetMap[key].mockup.desktop = asset.image;
      } else if (asset.deviceType === "mobile") {
        assetMap[key].mockup.mobile = asset.image;
      }
    });
  });

  for (const k in assetMap) {
    processedAssets.push(assetMap[k]);
  }

  // Metadata object derived from the input
  const metadata = {
    pageName: pageName,
    bannerColor: "#FFFFFF",
    creator: moduleResponse.clientInfo && moduleResponse.clientInfo.requestBy ? moduleResponse.clientInfo.requestBy : "Unknown",
    creationDate: new Date(moduleResponse.clientInfo ? moduleResponse.clientInfo.createdts : Date.now()).toLocaleString(),
    status: status,
    deviceType: "Desktop", // default, can toggle with tabs
    gridName: gridName,
    usecase: usecase
  };

  // Constants
  const desktopYLabels = ["4", "6"];
  const mobileYLabels = ["2", "3"];
  const smartCreativeUsecase = "hubspoke";

  // States
  const [heading, setHeading] = useState(undefined);
  const [subheading, setSubHeading] = useState(undefined);
  const [showApproveModal, setShowApproveModal] = useState(false);
  const [requestProcessing, setRequestProcessing] = useState(false);
  const [reason, setReason] = useState(undefined);
  const [selectedObj, setSelectedObj] = useState(undefined);
  const [recommendation, setRecommendation] = useState(undefined);
  const [comments, setComments] = useState(undefined);
  const [reasonSelected, setReasonSelected] = useState(undefined);

  const closeApproveModal = () => {
    setShowApproveModal(false);
    resetModelDatas();
    setSelectedObj(undefined);
  };

  const resetModelDatas = () => {
    setReason(undefined);
    setHeading(undefined);
    setSubHeading(undefined);
    setRecommendation(undefined);
    setComments(undefined);
    setReasonSelected(undefined);
  };

  const clickApproveYes = (id, remarks, from) => {
    setShowApproveModal(false);
    handleModalSubmit();
  };

  const onUpdateComments = (event) => {
    setComments(event.target.value);
    setReason(event.target.value);
  };

  const onUpdateHeading = (event) => {
    setHeading(event.target.value);
  };

  const onUpdateSubHeading = (event) => {
    setSubHeading(event.target.value);
  };

  const [showRejectModal, setShowRejectModal] = useState(false);
  const closeRejectModal = () => {
    setShowRejectModal(false);
  };

  const clickRejectYes = () => {
    setShowRejectModal(false);
    handleModalSubmit();
  };

  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const closeDeleteModal = () => {
    setShowDeleteModal(false);
  };

  const clickDeleteYes = () => {
    setShowDeleteModal(false);
    handleModalSubmit();
  };

  const [activeTab, setActiveTab] = useState("desktop");
  const [assetsState, setAssetsState] = useState([...processedAssets]);
  const [imageBehaviors, setImageBehaviors] = useState(
    processedAssets.reduce((acc, asset) => {
      acc[asset.id] = asset.defaultOption;
      return acc;
    }, {})
  );

  const [newItemId, setNewItemId] = useState("");
  const [selectedAssetId, setSelectedAssetId] = useState(null);
  const [selectedAssembly, setSelectedAssembly] = useState("4");
  const [innerCollapsed, setInnerCollapsed] = useState(true);
  const [modalInput, setModalInput] = useState({
    reason: "",
    details: "",
    recommendations: "",
  });
  const [showModal, setShowModal] = useState({ type: "", assetId: null });
  const [draggedItemId, setDraggedItemId] = useState(null);

  const Labels = activeTab === "desktop" ? ["1280", "Inh"] : ["375"];

  const chunkArray = (array, size) => {
    const result = [];
    for (let i = 0; i < array.length; i += size) {
      result.push(array.slice(i, i + size));
    }
    return result;
  };

  const updateAssembly = () => {
    const count = assetsState.length;
    if (activeTab === "desktop") {
      if (count > 4) {
        setSelectedAssembly("6");
      } else {
        setSelectedAssembly("4");
      }
    } else {
      if (count <= 4) {
        setSelectedAssembly("2");
      } else {
        setSelectedAssembly("3");
      }
    }
  };

  useEffect(() => {
    updateAssembly();
  }, [activeTab, assetsState]);

  useEffect(() => {
    if (activeTab === "mobile") {
      const maxItemsPerRow = parseInt(selectedAssembly, 10);
      const assetChunks = chunkArray(assetsState, maxItemsPerRow);
      setInnerCollapsed(assetChunks.length > 2);
    } else {
      setInnerCollapsed(false);
    }
  }, [activeTab, selectedAssembly, assetsState]);

  const handleBehaviorChange = (id, behavior) => {
    setImageBehaviors((prev) => ({
      ...prev,
      [id]: behavior,
    }));
    setSelectedAssetId(id);
  };

  const getImageStyle = (behavior, size) => {
    switch (behavior) {
      case "tight":
        return { width: `${size}px`, height: `${size}px`, objectFit: "contain" };
      case "tight(crop)":
        return { width: `${size}px`, height: `${size}px`, objectFit: "cover" };
      case "overflow":
        return { width: `${size * 1.3}px`, height: `${size * 1.3}px`, objectFit: "contain" };
      case "overflow(crop)":
        return { width: `${size * 1.3}px`, height: `${size * 1.3}px`, objectFit: "cover" };
      case "inside":
        return { width: `${size}px`, height: `${size}px`, objectFit: "cover" };
      default:
        return { width: `${size}px`, height: `${size}px`, objectFit: "contain" };
    }
  };

  const getImageSize = (assemblyLabel, screenSize) => {
    const maxItemsPerRow = parseInt(assemblyLabel, 10);
    const isDesktop = activeTab === "desktop";
    if (isDesktop) {
      if (screenSize === "1280") {
        if (maxItemsPerRow === 4) return 290;
        if (maxItemsPerRow === 6) return 192;
      } else if (screenSize === "Inh") {
        if (maxItemsPerRow === 4) return 200;
        if (maxItemsPerRow === 6) return 132;
      }
    } else {
      if (screenSize === "375") {
        if (maxItemsPerRow === 2) return 135;
        if (maxItemsPerRow === 3) return 104;
        return 100;
      }
    }
    return 100; // default
  };

  const handleAddNewItem = () => {
    const newIdInt = parseInt(newItemId, 10);
    if (!newItemId || assetsState.some((asset) => asset.id === newIdInt)) {
      alert("Invalid or duplicate ID. Please enter a unique ID.");
      return;
    }
    const newAsset = {
      id: newIdInt,
      originalLabel: `Asset ${newItemId}`,
      label: `Asset ${newItemId}`,
      image: "https://img.icons8.com/color/200/000000/trousers.png",
      groupName: "Group A",
      backgroundColor: "#C1FFC1",
      mockup: {
        desktop: "https://img.icons8.com/color/200/000000/trousers.png",
        mobile: "https://img.icons8.com/color/200/000000/trousers.png",
      },
      options: defaultOptions,
      defaultOption: "tight",
      status: null,
    };

    setAssetsState((prev) => [...prev, newAsset]);
    setImageBehaviors((prev) => ({
      ...prev,
      [newIdInt]: newAsset.defaultOption,
    }));
    setNewItemId("");
    updateAssembly();
  };

  const handleDragStart = (e, id) => {
    setDraggedItemId(id);
    e.dataTransfer.effectAllowed = "move";
  };

  const handleDragOver = (e) => {
    e.preventDefault();
    e.dataTransfer.dropEffect = "move";
  };

  const handleDrop = (e, id) => {
    e.preventDefault();
    const draggedIndex = assetsState.findIndex((item) => item.id === draggedItemId);
    const dropIndex = assetsState.findIndex((item) => item.id === id);

    if (draggedIndex !== dropIndex) {
      const updatedAssets = [...assetsState];
      const [draggedItem] = updatedAssets.splice(draggedIndex, 1);
      updatedAssets.splice(dropIndex, 0, draggedItem);
      setAssetsState(updatedAssets);
    }

    setDraggedItemId(null);
  };

  const handleSelectAsset = (assetId) => {
    setSelectedAssetId(assetId === selectedAssetId ? null : assetId);
  };

  const removeStatusFromLabel = (label) => {
    return label.replace(/\s*\([ar]\)$/, "");
  };

  const updateAssetStatus = (assetId, newStatus) => {
    if (newStatus === "Deleted") {
      setAssetsState((prevAssets) => prevAssets.filter((asset) => asset.id !== assetId));
      setSelectedAssetId(null);
      updateAssembly();
      return;
    }

    setAssetsState((prevAssets) =>
      prevAssets.map((asset) => {
        if (asset.id === assetId) {
          let newLabel = asset.originalLabel;
          if (newStatus === "Approved") {
            newLabel = removeStatusFromLabel(asset.label) + " (a)";
          } else if (newStatus === "Rejected") {
            newLabel = removeStatusFromLabel(asset.label) + " (r)";
          } else if (newStatus === null) {
            newLabel = asset.originalLabel;
          }
          return { ...asset, status: newStatus, label: newLabel };
        }
        return asset;
      })
    );
  };

  const handleAction = (actionType) => {
    if (!selectedAssetId) {
      alert("No asset selected.");
      return;
    }
    const selectedAsset = assetsState.find((asset) => asset.id === selectedAssetId);
    if (selectedAsset) {
      if (actionType === "undo") {
        updateAssetStatus(selectedAssetId, null);
        setSelectedAssetId(null);
      } else {
        if (actionType === "approve") {
          setSelectedObj(selectedAsset);
          setShowApproveModal(true);
        } else if (actionType === "delete") {
          setSelectedObj(selectedAsset);
          setShowDeleteModal(true);
        } else if (actionType === "reject") {
          selectedAsset.heading = "Reject Item";
          selectedAsset.subHeading = "Please enter reason";
          setSelectedObj(selectedAsset);
          setShowRejectModal(true);
        }
      }
    }
  };

  const handleModalSubmit = () => {
    const { type, assetId } = showModal;
    if (type === "approve") {
      updateAssetStatus(assetId, "Approved");
    } else if (type === "reject") {
      updateAssetStatus(assetId, "Rejected");
    } else if (type === "delete") {
      updateAssetStatus(assetId, "Deleted");
    }
    setShowModal({ type: "", assetId: null });
    setModalInput({ reason: "", details: "", recommendations: "" });
    setSelectedAssetId(null);
    updateAssembly();
  };

  const handleModalClose = () => {
    setShowModal({ type: "", assetId: null });
    setModalInput({ reason: "", details: "", recommendations: "" });
  };

  const handleAssemblyChange = (e) => {
    setSelectedAssembly(e.target.value);
  };

  const renderMockupSections = (assemblies) => {
    const isMobile = activeTab === "mobile";
    return (
      <div>
        {assemblies.map((assemblyLabel) => {
          const maxItemsPerRow = parseInt(assemblyLabel, 10);
          let assetChunks = chunkArray(assetsState, maxItemsPerRow);
          if (isMobile && innerCollapsed && assetChunks.length > 2) {
            assetChunks = assetChunks.slice(0, 2);
          }
          return (
            <div className="hubspokep-banner-container" key={assemblyLabel}>
              <div style={{ display: "flex" }}>
                <div className="hubspokep-assembly-label">{`${assemblyLabel}-ROW ASSEMBLY`}</div>
                <div style={{ flex: 1 }}>
                  <div style={{ display: "flex", gap: "20px", overflowX: "auto" }}>
                    {Labels.map((screenSize, index) => {
                      const cellSize = getImageSize(assemblyLabel, screenSize);
                      const labelText = `${screenSize} (${activeTab === "desktop" ? "D" : "M"})`;
                      return (
                        <div key={`${assemblyLabel}-${screenSize}`}>
                          <div
                            className="hubspokep-banner-label"
                            style={{
                              backgroundColor: index === 0 ? "rgb(0, 57, 110)" : "rgb(172, 173, 176)",
                              color: index === 0 ? "rgb(255, 255, 255)" : "rgb(81, 83, 87)",
                            }}
                          >
                            {labelText}
                          </div>
                          <div
                            className="hubspokep-banner"
                            style={{ backgroundColor: metadata.bannerColor }}
                          >
                            <div className="hubspokep-page-name">
                              <h3>{metadata.pageName}</h3>
                            </div>
                            <div
                              className="hubspokep-banner-grid"
                              style={{
                                display: "grid",
                                gridTemplateColumns: `repeat(${maxItemsPerRow}, 1fr)`,
                                gap: "10px",
                              }}
                            >
                              {assetChunks.map((chunk, chunkIndex) => (
                                <React.Fragment key={`chunk-${chunkIndex}`}>
                                  {chunk.map((asset) => (
                                    <div
                                      key={`${assemblyLabel}-${screenSize}-${asset.id}`}
                                      style={{
                                        display: "flex",
                                        flexDirection: "column",
                                        alignItems: "center",
                                        width: `${cellSize}px`,
                                      }}
                                    >
                                      <div
                                        style={{
                                          backgroundColor: asset.backgroundColor,
                                          borderRadius: "50%",
                                          overflow:
                                            imageBehaviors[asset.id] === "overflow" ? "visible" : "hidden",
                                          display: "flex",
                                          justifyContent: "center",
                                          alignItems: "center",
                                          width: `${cellSize}px`,
                                          height: `${cellSize}px`,
                                          marginBottom: "5px",
                                        }}
                                      >
                                        <img
                                          src={asset.mockup[activeTab]}
                                          alt={asset.label}
                                          style={getImageStyle(imageBehaviors[asset.id], cellSize)}
                                        />
                                      </div>
                                      <div
                                        style={{
                                          fontSize: "12px",
                                          textAlign: "center",
                                          whiteSpace: "normal",
                                        }}
                                      >
                                        {asset.label}
                                      </div>
                                    </div>
                                  ))}
                                </React.Fragment>
                              ))}
                            </div>
                            {isMobile && chunkArray(assetsState, maxItemsPerRow).length > 2 && (
                              <button
                                onClick={() => setInnerCollapsed((prev) => !prev)}
                                style={{
                                  width: "100%",
                                  borderRadius: "500px",
                                  cursor: "pointer",
                                  backgroundColor: "transparent",
                                  border: "solid black 1px",
                                  marginTop: "4px",
                                  fontSize: "1rem",
                                  height: "32px",
                                }}
                              >
                                {innerCollapsed ? "See More" : "See Less"}
                              </button>
                            )}
                          </div>
                        </div>
                      );
                    })}
                  </div>
                </div>
              </div>
            </div>
          );
        })}
      </div>
    );
  };

  const handleContainerClick = () => {
    setSelectedAssetId(null);
  };

  let actionButtons = null;
  if (selectedAssetId) {
    const selectedAsset = assetsState.find((asset) => asset.id === selectedAssetId);
    if (selectedAsset) {
      if (selectedAsset.status === "Approved" || selectedAsset.status === "Rejected") {
        // Show Undo & Delete
        actionButtons = (
          <>
            <button
              className="hubspokep-action-button hubspokep-undo-button"
              onClick={() => handleAction("undo")}
            >
              Undo
            </button>
            <button
              className="hubspokep-action-button hubspokep-delete-button"
              onClick={() => handleAction("delete")}
            >
              Delete
            </button>
          </>
        );
      } else {
        // Show Approve/Reject/Delete
        actionButtons = (
          <>
            <button
              className="hubspokep-action-button hubspokep-approve-button"
              onClick={() => handleAction("approve")}
            >
              Approve
            </button>
            <button
              className="hubspokep-action-button hubspokep-reject-button"
              onClick={() => handleAction("reject")}
            >
              Reject
            </button>
            <button
              className="hubspokep-action-button hubspokep-delete-button"
              onClick={() => handleAction("delete")}
            >
              Delete
            </button>
          </>
        );
      }
    }
  }

  return (
    <div className="hubspokep-container" onClick={handleContainerClick}>
      <div className="hubspokep-top-section" onClick={(e) => e.stopPropagation()}>
        {/* Meta Details */}
        <div className="hubspokep-meta-details">
          <div className="hubspokep-meta-details-content">
            <h3>Meta Details</h3>
            <p>
              <strong>Page Name: </strong> {metadata.pageName}
            </p>
            <p>
              <strong>Creator:</strong> {metadata.creator}
            </p>
            <p>
              <strong>Creation Date:</strong> {metadata.creationDate}
            </p>
            <p>
              <strong>Status:</strong> {metadata.status}
            </p>
            <p>
              <strong>Device Type:</strong> {metadata.deviceType}
            </p>
            <p>
              <strong>Grid Name:</strong> {metadata.gridName}
            </p>
          </div>
          <div className="hubspokep-add-item">
            <h4>Add New Item by ID</h4>
            <input
              type="text"
              placeholder="Enter new asset ID"
              value={newItemId}
              onChange={(e) => setNewItemId(e.target.value)}
            />
            <button onClick={handleAddNewItem}>Add Item</button>
          </div>
        </div>

        <div className="hubspokep-assets-section">
          <div className="hubspokep-assets-header">
            <h3>Assets</h3>
            <div style={{ display: "inline-block" }}>{actionButtons}</div>
          </div>
          <div className="hubspokep-assets-grid" onClick={(e) => e.stopPropagation()}>
            {assetsState.map((asset) => (
              <SortableItem
                key={asset.id}
                id={asset.id}
                asset={asset}
                imageBehaviors={imageBehaviors}
                handleBehaviorChange={handleBehaviorChange}
                getImageStyle={getImageStyle}
                onDragStart={handleDragStart}
                onDragOver={handleDragOver}
                onDrop={handleDrop}
                onSelectAsset={handleSelectAsset}
                isSelected={selectedAssetId === asset.id}
              />
            ))}
          </div>
        </div>

        {/* Tabs */}
        <div className="hubspokep-tabs" onClick={(e) => e.stopPropagation()}>
          <button
            onClick={() => {
              setActiveTab("desktop");
              metadata.deviceType = "Desktop";
            }}
            className={activeTab === "desktop" ? "active hubspokep-desktop" : ""}
            aria-label="Switch to Desktop Tab"
          >
            Desktop
          </button>
          <button
            onClick={() => {
              setActiveTab("mobile");
              metadata.deviceType = "Mobile";
            }}
            className={activeTab === "mobile" ? "active hubspokep-mobile" : ""}
            aria-label="Switch to Mobile Tab"
          >
            Mobile
          </button>
        </div>

        {/* Assembly Selection */}
        <div className="hubspokep-assembly-selection" onClick={(e) => e.stopPropagation()}>
          <label>Choose Assembly:</label>
          <select value={selectedAssembly} onChange={handleAssemblyChange}>
            {activeTab === "desktop"
              ? desktopYLabels.map((label) => (
                  <option key={label} value={label}>
                    {label}-row Assembly
                  </option>
                ))
              : mobileYLabels.map((label) => (
                  <option key={label} value={label}>
                    {label}-row Assembly
                  </option>
                ))}
          </select>
        </div>

        {/* Render Selected Assembly */}
        {renderMockupSections([selectedAssembly])}

        {/* Save Button */}
        <div className="hubspokep-save-button-container">
          <button className="hubspokep-save-button" onClick={() => alert("Saved")}>
            Save
          </button>
        </div>

        <div className="smartcreative-models">
          {showApproveModal && (
            <Approve
              showApproveModal={showApproveModal}
              spinner={requestProcessing}
              closeApproveModal={closeApproveModal}
              clickApproveYes={clickApproveYes}
              onUpdateComments={onUpdateComments}
              reason={reason}
              selectedobj={selectedObj}
              from={smartCreativeUsecase}
              heading={heading}
              subheading={subheading}
              onUpdateHeading={onUpdateHeading}
              onUpdateSubHeading={onUpdateSubHeading}
            />
          )}
          {showRejectModal && (
            <Reject
              showRejectModal={showRejectModal}
              spinner={requestProcessing}
              closeRejectModal={closeRejectModal}
              clickRejectYes={clickRejectYes}
              selectedObj={selectedObj}
              usecase={smartCreativeUsecase}
              action={showRejectModal ? "reject" : "modify"}
              position={undefined}
              isRejected={true}
            />
          )}
          {showDeleteModal && (
            <Delete
              showDeleteModal={showDeleteModal}
              closeDeleteModal={closeDeleteModal}
              clickDeleteYes={clickDeleteYes}
              spinner={requestProcessing}
            />
          )}
        </div>
      </div>
    </div>
  );
};

export default HubspokePreview;



import React from "react";

export function SortableItem({
  id,
  asset,
  imageBehaviors,
  handleBehaviorChange,
  getImageStyle,
  onDragStart,
  onDragOver,
  onDrop,
  onSelectAsset,
  isSelected,
}) {
  const handleClick = (e) => {
    e.stopPropagation();
    onSelectAsset(id);
  };

  return (
    <div
      className={`hubspokep-sortable-item ${isSelected ? "selected" : ""}`}
      draggable="true"
      onDragStart={(e) => onDragStart(e, id)}
      onDragOver={(e) => onDragOver(e)}
      onDrop={(e) => onDrop(e, id)}
      onClick={handleClick}
      title={asset.label}
    >
      <div
        className="hubspokep-sortable-item-image-container"
        style={{
          backgroundColor: asset.backgroundColor,
          overflow:
            imageBehaviors[asset.id] === "overflow" ? "visible" : "hidden",
        }}
      >
        {/* We use a fixed size of 75 here as in the original code */}
        <img
          src={asset.mockup && asset.mockup.desktop ? asset.mockup.desktop : asset.image}
          alt={asset.label}
          style={getImageStyle(imageBehaviors[asset.id], 75)}
        />
      </div>
      <div className="hubspokep-sortable-item-label">{asset.label}</div>
      <select
        value={imageBehaviors[asset.id]}
        onChange={(e) => handleBehaviorChange(asset.id, e.target.value)}
      >
        {asset.options.map((option) => (
          <option key={option} value={option}>
            {option.charAt(0).toUpperCase() + option.slice(1)}
          </option>
        ))}
      </select>
    </div>
  );
}
